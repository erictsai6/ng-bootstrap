{"version":3,"sources":["../../src/dropdown/dropdown.ts"],"names":[],"mappings":"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","file":"dropdown.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  OnDestroy,\n  Renderer\n} from '@angular/core';\nimport {NgbDropdownConfig} from './dropdown-config';\n\n/**\n * Transforms a node into a dropdown.\n */\n\nexport class NgbDropdown implements OnInit,\n    OnDestroy {\n  private _toggleElement: any;\n\n  /**\n   * Holds the remove listener method returned by listenGlobal\n   */\n  private _outsideClickListener;\n\n  /**\n   * Indicates that the dropdown should open upwards\n   */\n   up: boolean;\n\n  /**\n   * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.\n   */\n   autoClose: 'always' | 'disabled' | 'outsideClick';\n\n  /**\n   *  Defines whether or not the dropdown-menu is open initially.\n   */\n   _open = false;\n\n  /**\n   *  An event fired when the dropdown is opened or closed.\n   *  Event's payload equals whether dropdown is open.\n   */\n   openChange = new EventEmitter();\n\n  constructor(config: NgbDropdownConfig, private _element: ElementRef, private _renderer: Renderer) {\n    this.up = config.up;\n    this.autoClose = config.autoClose;\n  }\n\n  ngOnInit() {\n    if (this._open) {\n      this._registerListener();\n    }\n  }\n\n  ngOnDestroy() { this.close(); }\n\n  /**\n   * Checks if the dropdown menu is open or not.\n   */\n  isOpen(): boolean { return this._open; }\n\n  /**\n   * Opens the dropdown menu of a given navbar or tabbed navigation.\n   */\n  open(): void {\n    if (!this._open) {\n      this._open = true;\n      this._registerListener();\n      this.openChange.emit(true);\n    }\n  }\n\n  /**\n   * Closes the dropdown menu of a given navbar or tabbed navigation.\n   */\n  close(): void {\n    if (this._open) {\n      this._open = false;\n\n      // Removes \"listenGlobal\" listener\n      if (this._outsideClickListener) {\n        this._outsideClickListener();\n      }\n\n      this.openChange.emit(false);\n    }\n  }\n\n  /**\n   * Toggles the dropdown menu of a given navbar or tabbed navigation.\n   */\n  toggle(): void {\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  closeFromOutsideClick($event) {\n    if (this.autoClose === 'always' && $event.button !== 2 && !this._isEventFromToggle($event)) {\n      this.close();\n    }\n    if (this.autoClose === 'outsideClick' && !this._isEventFromInside($event)) {\n      this.close();\n    }\n  }\n\n  closeFromOutsideEsc() {\n    if (this.autoClose) {\n      this.close();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  set toggleElement(toggleElement: any) { this._toggleElement = toggleElement; }\n\n  private _isEventFromToggle($event) { return !!this._toggleElement && this._toggleElement.contains($event.target); }\n\n  private _isEventFromInside($event) { return this._element.nativeElement.contains($event.target); }\n\n  private _registerListener() {\n    this._outsideClickListener = this._renderer.listenGlobal('document', 'click', (e) => this.closeFromOutsideClick(e));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdown]',\n  exportAs: 'ngbDropdown',\n  host: {\n    '[class.dropdown]': '!up',\n    '[class.dropup]': 'up',\n    '[class.show]': 'isOpen()',\n    '(keyup.esc)': 'closeFromOutsideEsc()',\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbDropdownConfig, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'up': [{ type: Input },],\n'autoClose': [{ type: Input },],\n'_open': [{ type: Input, args: ['open', ] },],\n'openChange': [{ type: Output },],\n};\n}\n\n/**\n * Allows the dropdown to be toggled via click. This directive is optional.\n */\n\nexport class NgbDropdownToggle {\n  constructor(public dropdown: NgbDropdown, elementRef: ElementRef) {\n    dropdown.toggleElement = elementRef.nativeElement;\n  }\n\n  toggleOpen() { this.dropdown.toggle(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngbDropdownToggle]',\n  host: {\n    'class': 'dropdown-toggle',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'dropdown.isOpen()',\n    '(click)': 'toggleOpen()'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbDropdown, },\n{type: ElementRef, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
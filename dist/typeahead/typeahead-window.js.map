{"version":3,"file":"typeahead-window.js","sourceRoot":"","sources":["../../src/typeahead/typeahead-window.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, Output, EventEmitter, TemplateRef, OnInit} from '@angular/core';\n\nimport {toString} from '../util/util';\n\n/**\n * Context for the typeahead window template in case you want to override the default one\n */\nexport interface WindowTemplateContext {\n  /**\n   * Your typeahead results data model\n   */\n  results: any;\n\n  /**\n   * Search term from the input used to get current result\n   */\n  term: string;\n\n  /**\n   * Typeahead window context\n   */\n  context: NgbTypeaheadWindow;\n}\n\n\n/**\n * Context for the typeahead result template in case you want to override the default one\n */\nexport interface ResultTemplateContext {\n  /**\n   * Your typeahead result data model\n   */\n  result: any;\n\n  /**\n   * Search term from the input used to get current result\n   */\n  term: string;\n}\n\n/**\n * Context for the typeahead no results template\n */\nexport interface NoResultsTemplateContext {\n  /**\n   * Search term from the input that did not return any results\n   */\n  term: string;\n}\n\n@Component({\n  selector: 'ngb-typeahead-window',\n  exportAs: 'ngbTypeaheadWindow',\n  host: { 'class': 's-typeahead', 'style': 'display: block;', 'role': 'listbox', '[id]': 'id'},\n  template: `\n    <ng-template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </ng-template>\n    <ng-template #wt let-results=\"results\" let-context=\"context\">\n      <ng-template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n        <button type=\"button\" class=\"dropdown-item\" role=\"option\"\n          [id]=\"id + '-' + idx\"\n          [class.active]=\"idx === activeIdx\"\n          (mouseenter)=\"context.markActive(idx)\"\n          (click)=\"context.select(result)\">\n            <ng-template [ngTemplateOutlet]=\"resultTemplate || rt\"\n            [ngTemplateOutletContext]=\"{result: result, term: term, formatter: formatter}\"></ng-template>\n        </button>\n      </ng-template>\n    </ng-template>\n    <ng-template [ngTemplateOutlet]=\"windowTemplate || wt\"\n      [ngTemplateOutletContext]=\"_getWindowContext()\">\n    </ng-template>\n    <ng-template *ngIf=\"!results || results.length === 0\"\n      [ngTemplateOutlet]=\"noResultsTemplate\"\n      [ngTemplateOutletContext]=\"_getNoResultsContext()\">\n    </ng-template>\n  `\n})\nexport class NgbTypeaheadWindow implements OnInit {\n  private _results: Array<any>;\n  private _term: string;\n  private _context: WindowTemplateContext = {results: this._results, term: this._term, context: this};\n  activeIdx = 0;\n\n\n  /**\n   *  The id for the typeahead widnow. The id should be unique and the same\n   *  as the associated typeahead's id.\n   */\n  @Input() id: string;\n\n  /**\n   * Flag indicating if the first row should be active initially\n   */\n  @Input() focusFirst = true;\n\n  /**\n   * Typeahead match results to be displayed. Created as get and set so the ngTemplateOutletContext is only recreated on data\n   * changes.\n   */\n  @Input()\n  get results() {\n    return this._results;\n  };\n  set results(value: any) {\n    this._results = value;\n    this._context.results = value;\n  }\n\n  /**\n   * Search term used to get current results. Created as get and set so the ngTemplateOutletContext is only recreated on data\n   * changes.\n   */\n  @Input()\n  get term(): string {\n    return this._term;\n  };\n  set term(value: string) {\n    this._term = value;\n    this._context.term = value;\n  }\n\n  /**\n   * A function used to format a given result before display. This function should return a formatted string without any\n   * HTML markup\n   */\n  @Input() formatter = toString;\n\n  /**\n   * A template to override a matching result default display\n   */\n  @Input() resultTemplate: TemplateRef<ResultTemplateContext>;\n\n  /**\n   * A template used to display a no results message in the dropdown window\n   */\n  @Input() noResultsTemplate: TemplateRef<any>;\n\n  /**\n   * A template to override a matching result default display\n   */\n  @Input() windowTemplate: TemplateRef<WindowTemplateContext>;\n\n  /**\n   * Event raised when user selects a particular result row\n   */\n  @Output('select') selectEvent = new EventEmitter();\n\n  @Output('activeChange') activeChangeEvent = new EventEmitter();\n\n  _getWindowContext() { return this._context; }\n\n\n  _getNoResultsContext() { return {term: this.term}; }\n  getActive() { return this.results[this.activeIdx]; }\n\n  markActive(activeIdx: number) {\n    this.activeIdx = activeIdx;\n    this._activeChanged();\n  }\n\n  next() {\n    if (this.activeIdx === this.results.length - 1) {\n      this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;\n    } else {\n      this.activeIdx++;\n    }\n    this._activeChanged();\n  }\n\n  prev() {\n    if (this.activeIdx < 0) {\n      this.activeIdx = this.results.length - 1;\n    } else if (this.activeIdx === 0) {\n      this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;\n    } else {\n      this.activeIdx--;\n    }\n    this._activeChanged();\n  }\n\n  select(item) { this.selectEvent.emit(item); }\n\n  ngOnInit() {\n    this.activeIdx = this.focusFirst ? 0 : -1;\n    this._activeChanged();\n  }\n\n  private _activeChanged() {\n    this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\n  }\n}\n"]}